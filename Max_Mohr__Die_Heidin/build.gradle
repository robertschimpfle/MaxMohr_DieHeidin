import java.text.SimpleDateFormat

def srcDir = 'src/main/latex'
def buildSrcDir = 'build'

task prepare(type: Exec) {
	commandLine 'mkdir', '-p', 'build'
}

task clean(type: Exec, dependsOn: prepare) {
	commandLine 'rm', '-rf', 'build'
}

task replaceVersionInfo(type: Copy, dependsOn: clean) {
	from srcDir
	into buildSrcDir
	include '**/*.tex'
	filter { line ->
		line.replace("@version@", bookVersion)
	}
	filter { line ->
		line.replace("@timestamp@", new SimpleDateFormat("dd.MM.yyyy HH:mm:ss").format(new Date()))
	}
}

task latexFirstRun(type: Exec, dependsOn: replaceVersionInfo) {
	commandLine 'pdflatex', '-output-directory', '.', 'text.tex'
	workingDir buildSrcDir
	ignoreExitValue true
	standardOutput = new ByteArrayOutputStream()
	doLast {
		if (execResult.getExitValue() != 0) {
			println standardOutput.toString()
			throw execResult.rethrowFailure()
		}
	}
}

task latexSecondRun(type: Exec, dependsOn: latexFirstRun) {
	commandLine 'pdflatex', '-output-directory', '.', 'text.tex'
	workingDir buildSrcDir
	ignoreExitValue true
	standardOutput = new ByteArrayOutputStream()
	doLast {
		if (execResult.getExitValue() != 0) {
			println standardOutput.toString()
			throw execResult.rethrowFailure()
		}
	}
}

task latexThirdRun(type: Exec, dependsOn: latexSecondRun) {
	commandLine 'pdflatex', '-output-directory', '.', 'text.tex'
	workingDir buildSrcDir
}

task checkTexFiles() {
	def inputFiles  = files { fileTree(dir: srcDir, includes: ['*.tex']) }
	inputs.files inputFiles
	println ""
	doLast {
		inputFiles.each { datei ->
			String fileContent = datei.text
			logger.info("Length of file ${datei.name} = ${fileContent.length()}")
			def lineCounter = 0
			fileContent.eachLine {
				lineCounter++
				// Falsche Trenner.
				if (it =~ /[^a-zA-ZÄÖÜäöüß]\\-[^a-zA-ZÄÖÜäöüß]/) {
					logger.error("Error: ${datei.name}:${lineCounter}, Falscher Trennstrich in \"${it}\"")
				}
				// Falsche Trenner am Zeilenende.
				if ((it =~ /\\-[^a-zA-ZÄÖÜäöüß]%.*$/) || (it =~ /\\-%.+$/)) {
					logger.error("Error: ${datei.name}:${lineCounter}, Falscher Trennstrich am Zeilenende: \"${it}\"")
				}
			}
		}
	}
}

task listLigations() {
	def inputFiles  = files { fileTree(dir: srcDir, includes: ['*.tex']) }
	inputs.files inputFiles

	doLast {
		def ligaturen = ['f', 't']
		def liste = []
		def b = 'a-zA-ZÄÖÜäöüß'
		inputFiles.each {
			String fileContent = it.text

			ligaturen.each {
				def matcher =
					fileContent =~
						/(([${b}]|(\\-[${b}]))+(\\-%\n){0,1}){0,1}([${b}]|(\\-[${b}]))+(${it}(\\-){0,1}${it})([${b}]|(\\-[${b}]))*((\\-%\n){0,1}([${b}]|(\\-[${b}]))+){0,1}/
					matcher.each {
					String wort = it[0].replaceAll('\\\\-', '').replaceAll('%', '').replaceAll('\n', '')
					if (! liste.contains(wort)) { liste.add(wort) }
				}
			}
		}
		println "Im Text gefundene Ligaturwörter mit den Doppelbuchstaben von ${ligaturen}:\n"
		liste.sort{x, y -> x.compareToIgnoreCase y}.each {println it}
		println "\n${liste.size} Wörter"
	}
}

task pdf(dependsOn: latexThirdRun) {
	doLast { logger.info("PDF created.") }
}
