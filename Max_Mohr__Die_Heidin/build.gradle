import java.text.SimpleDateFormat

def srcDir = 'src/main/latex'
def buildSrcDir = 'build'

task prepare(type: Exec) {
	commandLine 'mkdir', '-p', 'build'
}

task clean(type: Exec, dependsOn: prepare) {
	commandLine 'rm', '-rf', 'build'
}

task replaceVersionInfo(type: Copy, dependsOn: clean) {
	from srcDir
	into buildSrcDir
	include '**/*.tex'
	filter { line ->
		line.replace("@version@", bookVersion)
	}
	filter { line ->
		line.replace("@timestamp@", new SimpleDateFormat("dd.MM.yyyy HH:mm:ss").format(new Date()))
	}
}

task latexFirstRun(type: Exec, dependsOn: replaceVersionInfo) {
	commandLine 'pdflatex', '-output-directory', '.', 'text.tex'
	workingDir buildSrcDir
	ignoreExitValue true
	standardOutput = new ByteArrayOutputStream()
	doLast {
		if (execResult.getExitValue() != 0) {
			println standardOutput.toString()
			throw execResult.rethrowFailure()
		}
	}
}

task latexSecondRun(type: Exec, dependsOn: latexFirstRun) {
	commandLine 'pdflatex', '-output-directory', '.', 'text.tex'
	workingDir buildSrcDir
	ignoreExitValue true
	standardOutput = new ByteArrayOutputStream()
	doLast {
		if (execResult.getExitValue() != 0) {
			println standardOutput.toString()
			throw execResult.rethrowFailure()
		}
	}
}

task latexThirdRun(type: Exec, dependsOn: latexSecondRun) {
	commandLine 'pdflatex', '-output-directory', '.', 'text.tex'
	workingDir buildSrcDir
}

task checkTexFiles() {
	def inputFiles  = files { fileTree(dir: srcDir, includes: ['*.tex']) }
	inputs.files inputFiles
	
	doLast {
		inputFiles.each {
			String fileContent = it.text
			logger.info("Length of file ${it.name} = ${fileContent.length()}")
			def lineCounter = 0
			fileContent.eachLine {
				lineCounter++
				// Falsche Trenner am Zeilenende.
				if (it =~ /\\-[ \t]*$/) {
					logger.error("Error: Falscher Trennstrich am Zeilenende in Zeile ${lineCounter}: ${it}")
				}
			}
//			def splits = fileContent =~ /\\\\-%/
//			logger.info(splits.size().toString())
//			splits.each { entry ->
//				logger.info(entry)
//			}
		}
	}
}

task pdf(dependsOn: latexThirdRun) {
	doLast { logger.info("PDF created.") }
}
